---
import { formatDistance } from 'date-fns';

const { post } = Astro.props;

// Calculate the time ago from post date
const timeAgo = post.date
  ? formatDistance(new Date(post.date), new Date(), { addSuffix: true })
  : '';

// Get color class for tag based on Notion color
const getTagColorClass = (color) => {
  const colorMap = {
    blue: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',
    green: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',
    red: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300',
    yellow: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',
    orange: 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300',
    purple: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300',
    pink: 'bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-300',
    gray: 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300',
    default: 'bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-300',
  };
  
  return colorMap[color] || colorMap.default;
};

// Default cover image if none exists
const defaultCoverImage = '/images/default-cover.jpg';
---

<article class="bg-white dark:bg-secondary-800 rounded-lg shadow-sm hover:shadow-md transition-shadow overflow-hidden border border-secondary-200 dark:border-secondary-700 h-full flex flex-col">
  <a href={`/blog/${post.slug}`} class="block relative overflow-hidden aspect-video">
    <img
      src={post.coverImage || defaultCoverImage}
      alt={post.title}
      class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
    />
    {post.featured && (
      <span class="absolute top-4 right-4 bg-accent-500 text-white text-xs font-medium px-2 py-1 rounded-md">
        Featured
      </span>
    )}
  </a>
  
  <div class="p-5 flex-1 flex flex-col">
    <div class="flex flex-wrap gap-2 mb-3">
      {post.tags && post.tags.map((tag) => (
        <a
          href={`/tags/${tag.name.toLowerCase()}`}
          class={`text-xs font-medium px-2.5 py-0.5 rounded ${getTagColorClass(tag.color)}`}
        >
          {tag.name}
        </a>
      ))}
      
      {timeAgo && (
        <time class="text-xs text-secondary-500 dark:text-secondary-400 ml-auto">
          {timeAgo}
        </time>
      )}
    </div>
    
    <h2 class="text-xl font-semibold text-secondary-900 dark:text-white mb-2 line-clamp-2">
      <a href={`/blog/${post.slug}`} class="hover:text-primary-600 dark:hover:text-primary-400 transition-colors">
        {post.title}
      </a>
    </h2>
    
    <a 
      href={`/blog/${post.slug}`}
      class="text-primary-600 dark:text-primary-400 hover:text-primary-800 dark:hover:text-primary-300 text-sm font-medium inline-flex items-center transition-colors mt-auto"
    >
      Read more
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-4 w-4 ml-1"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path
          fill-rule="evenodd"
          d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z"
          clip-rule="evenodd"
        />
      </svg>
    </a>
  </div>
</article>